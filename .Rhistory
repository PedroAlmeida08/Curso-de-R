#Cria vetor de 1 até 10
1L:10L
#Cria uma lista
list(1, 'palavra')
#Cria uma lista
list(1, "palavra")
#Cria uma lista
list(1, "palavra", 5.4)
#Cria uma lista
list(1, "palavra", 5.4)
library(fitdistrplus)
tibble::tibble(a = 1:10, b = 2,11)
tibble::tibble(a = 1:10, b = 2:11)
f <- function(a, b){
a + b
}
g <- f
g(1L, 2L)
f <- function(a, b){
a + b
}
f(1L, 2L)
typeof(Inf)
#vetores (v1 = 1, v2 = 2, v3 = [4,5,6])
seq(1,9,2)
seq(1, 9, length.out = 3)
seq(1, 4, along.with = 1:10)
#Valores faltantes ou desconhecidos são representados por NA
a <- c(1, NA)
#Valores faltantes ou desconhecidos são representados por NA
a <- c(1, NA)
a
#O valor NA quase sempre contamina os cálculos
mean(a)
#Para resolver esse problema podemos usar o parâmetro na.rm = TRUE, ou seja
#NA remove = TRUE
mean(a, na.rm = TRUE)
#Valores faltantes ou desconhecidos são representados por NA
a <- c(1, 2, 3, NA)
#O valor NA quase sempre contamina os cálculos
mean(a)
#Para resolver esse problema podemos usar o parâmetro na.rm = TRUE, ou seja
#NA remove = TRUE
mean(a, na.rm = TRUE)
#Podemos detectar um valor NA através do comando is.na() e ele irá nos retornar
#TRUE onde houver um valor NA
is.na(a)
#As operações em R são vetoriais
1:5 * 2
#Vetores e listas em R podem ser nomeados
b <- c(primeiro = 1, segundo = 2, terceiro = 3)
#Vetores e listas em R podem ser nomeados
b <- c(primeiro = 1, segundo = 2, terceiro = 3)
b
#Isso é útil pois torna possível o acesso às posições do vetor pelos seus nomes
b[0]
b[1]
#Isso é útil pois torna possível o acesso às posições do vetor pelos seus nomes
b[segundo]
#Isso é útil pois torna possível o acesso às posições do vetor pelos seus nomes
b["segundo"]
#A função names pode retornar o nome das posições dos vetores ou então renomeá-los
names(b)
names(b) <- c("a", "b", "c")
names(b)
lista_nomeada <- list(primeiro = "a", segundo = 2, terceiro = c(1,2,3))
lista_nomeada
#Para acessar elementos em listas deve-se utilizar colchetes duplos
lista_nomeada[["primeiro"]]
lista_nomeado[[2]]
lista_nomeado[2]
lista_nomeado["a"]
#Para acessar elementos em listas deve-se utilizar colchetes duplos
lista_nomeada[[1]]
lista_nomeada[["segundo"]]
#Para acessar elementos em listas deve-se utilizar colchetes duplos
lista_nomeada[1]
lista_nomeada[[1]]
lista_nomeada[["segundo"]]
#Para acessar elementos em listas deve-se utilizar colchetes duplos
lista_nomeada[1]
lista_nomeada[[1]]
lista_nomeada[["primeiro"]]
lista_nomeada$primeiro
df <-
data.frame(
nome = c("João", "Maria", "Zezinho", "Juquinha"),
idade = c(7, 8, 9, 10),
altura = c(10, 11)
)
df
tib <-
#try evita que o erro paralise toda a execução do script
try(
tibble(
nome = c("João", "Maria", "Zezinho", "Juquinha"),
idade = c(7, 8, 9, 10),
altura = c(10, 11)
)
)
tib
tribble(
~nome,       ~idade,      ~altura,
"Bruno",     41,         1.75,
"João",      23,         1.80,
"Maria",     29,         1.70,
"Zezinho",   31,         1.78
)
tribble(
try(
~nome,       ~idade,      ~altura,
"Bruno",     41,         1.75,
"João",      23,         1.80,
"Maria",     29,         1.70,
"Zezinho",   31,         1.78
)
)
tribble(
try(
~nome,       ~idade,      ~altura,
"Bruno",     41,         1.75,
"João",      23,         1.80,
"Maria",     29,         1.70,
"Zezinho",   31,         1.78
)
)
tib <-
#try evita que o erro paralise toda a execução do script
try(
tibble(
nome = c("João", "Maria", "Zezinho", "Juquinha"),
idade = c(7, 8, 9, 10),
altura = c(10, 11, 12, 13)
)
)
tib <-
#try evita que o erro paralise toda a execução do script
try(
tibble::tibble(
nome = c("João", "Maria", "Zezinho", "Juquinha"),
idade = c(7, 8, 9, 10),
altura = c(10, 11, 12, 13)
)
)
tib
trib <-
try(
tibble::tribble(
~nome,       ~idade,      ~altura,
"Bruno",     41,         1.75,
"João",      23,         1.80,
"Maria",     29,         1.70,
"Zezinho",   31,         1.78
)
)
trib
install.packages("tibble")
install.packages("tibble")
library(tibble)
("tibble")
library(tibble)
install.packages(tibble)
install.packages("tibble")
install.packages("tibble")
library(tibble)
View(tib)
View(tib)
install.packages("dplyr")
library(dplyr)
install.packages("bench")
library(bench)
com_loop <- function(n){
x <- integer()
for (i in 1:n){
x <- c(x, i^2)
}
x
}
#programação funcional: aprenderemos posteriomente
sem_loop <- function(n){
x <- 1:n %>%
map_dbl(function(x){x^2})
x
}
com_loop(5)
sem_loop(5)
#programação funcional: aprenderemos posteriomente
install.packages("purrr")
install.packages("purrr")
library(purrr)
sem_loop <- function(n){
x <- 1:n %>%
map_dbl(function(x){x^2})
x
}
com_loop(5)
sem_loop(5)
(1:5)^2
#A biblioteca bench oferece funções ótimas para avaliar a performance de pedaços
#pequenos de código.
install.packages("bench")
library(bench)
resultados_perf <- mark(
sem_loop(1e4),
com_loop(1e4),
(1:1e4)^2
)
resultados_perf <- mark(
sem_loop(100),
com_loop(100),
(1:100)^2
)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
library(dplyr)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
resultados_perf <- mark(
sem_loop(1e4),
com_loop(1e4),
(1:1e4)^2
)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
plot(resultados_perf)
install.packages("ggplot2", "tidyr")
install.packages("ggplot2", "tidyr")
install.packages("ggplot2")
library(ggplot2)
install.packages("tidyr")
library(tidyr)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
library(dplyr)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
plot(resultados_perf)
library(ggplot2)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
plot(resultados_perf)
plot(resultados_perf)
com_loop <- function(n){
x <- integer()
for (i in 1:n){
x <- c(x, i^2)
}
x
}
library(purrr)
sem_loop <- function(n){
x <- 1:n %>%
map_dbl(function(x){x^2})
x
}
library(bench)
resultados_perf <- mark(
sem_loop(1e4),
com_loop(1e4),
(1:1e4)^2
)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
(dplyr)
library(dplyr)
resultados_perf %>%
select(expression, min, median, `itr/sec` )
plot(resultados_perf)
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
set.seed(88)
joga_monty_hall <- function(troca){
portas <- 1:3
#sample() sorteia elementos com ou sem reposição
porta_carro <- sample(portas, size = 1, replace = FALSE)
primeira_escolha <- 1
#Seleção negativa (retirando elementos)
portas_pra_revelar <- portas[-c(porta_carro, primeira_escolha)]
porta_revelada <- sample( c(portas_pra_revelar, portas_pra_revelar  ), 1)
if(troca){
escolha <- portas[-c(primeira_escolha, porta_revelada)]
}
else{
escolha <- primeira_escolha
}
escolha == porta_carro
}
n <- 1000
#replicate executa múltiplas vezes um comando e armazena os resultados em uma
#estrutura única
troca <- replicate(n = n, joga_monty_hall(troca = TRUE))
fica  <- replicate(n = n, joga_monty_hall(troca = FALSE))
```
fica  <- replicate(n = n, joga_monty_hall(troca = FALSE))
#Resultados:
sum(troca)/n
sum(fica)/n
source("~/.active-rstudio-document", echo=TRUE)
source("~/R/EPE - Treinamento/Bibliotecas.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
funcao <- function(x) x^2
map(.x = 1:10, .f = funcao)
#Map_dbl retorna um vetor
map_dbl(.x = 1:10, .f = funcao)
#Map_char retorna um vetor de Strings
map_char(.x = 1:10, .f = funcao)
#Map_chr retorna um vetor de Strings
map_chr(.x = 1:10, .f = funcao)
#Map_df aceita um dataframe como parâmetro e retorna um dataframe
map_df(.x = tibble(x = 1:10), .f = funcao)
#As funções tbm podem ser declaradas na chamada do map
#rnorm gera n medidas cada uma com uma média x e desvio padrão sd
map(.x = 1:5, .f = function(x){rnorm(n = 4, mean = x, sd = .01)} )
#As funções tbm podem ser declaradas na chamada do map
#rnorm gera n medidas cada uma com uma média x e desvio padrão sd
map(.x = 1:10, .f = function(x){rnorm(n = 4, mean = x, sd = .01)} )
#As funções tbm podem ser declaradas na chamada do map
#rnorm gera n medidas cada uma com uma média x e desvio padrão sd
map(.x = 1:2, .f = function(x){rnorm(n = 4, mean = x, sd = .01)} )
#As funções tbm podem ser declaradas na chamada do map
#rnorm gera n medidas cada uma com uma média x e desvio padrão sd
map(.x = 1:3, .f = function(x){rnorm(n = 4, mean = x, sd = .01)} )
#É possível utiizar shortcuts para funções
map(.x = 1:5, .f = ~rnorm(n = 4, mean = .x, sd = .01) )
# Os argumentos são repassados pela map para a função executada. Podemos então
# passar os argumentos para a map.
map(.x = 1:5, .f = rnorm, n = 4, sd = .01 )
#map2 e suas modificações para retornos em outros tipos, como map2_dbl(),
#são preparadas para funções de dois argumentos.
tib_2_arg <- tribble(
~mean,  ~sd,
0,       2,
0,       4,
1,       2,
1,       4,
)
map2(
.x = tib_2_arg$mean,
.y = tib_2_arg$sd,
.f = ~rnorm(n = 4, mean = .x, sd = .y)
)
#pmap e suas modificações para retornos em outros tipos, como pmap_dbl(), são
#preparadas um número ilimitado de argumentos.
#Uma lista de vetores nomeados deve ser passada para a pmap(). Esses são os
#argumentos passados para a função.
#Lembre que um Data Frame/Tibble é exatamente isso: uma lista de vetores nomeados.
#O detalhe é que os nomes dos vetores deve bater com o nome dos parâmetros da função
tib_n_arg <- tribble(
~mean,  ~sd,  ~n,
0,       2,   5,
0,       4,   5,
1,       2,   5,
1,       4,   5,
0,       2,   10,
0,       4,   10,
1,       2,   10,
1,       4,   10
)
pmap(.l = tib_n_arg, .f = rnorm)
